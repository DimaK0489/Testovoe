{"version":3,"sources":["BLL/UsersReducer.ts","DAL/API.ts","Components/Search.tsx","Components/UsersList.tsx","App.tsx","reportWebVitals.ts","BLL/Store.ts","index.tsx"],"names":["ACTION_TYPES","instance","axios","create","baseURL","withCredentials","usersAPI","get","initialState","deleteUserAC","id","type","DELETE_USER","getUsersListTC","dispatch","then","res","data","GET_USERS","catch","error","console","log","Search","useDispatch","users","useSelector","state","useState","name","setName","foundUsers","setFoundUsers","useEffect","deleteUser","useCallback","className","value","onChange","e","keyword","currentTarget","results","filter","user","toLowerCase","startsWith","username","email","placeholder","length","map","onClick","UsersList","React","memo","resetSettings","u","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","SEARCH_USER","userName","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb131329.chunk.js","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {usersAPI, UsersType} from \"../DAL/API\";\r\n\r\nexport type ActionType =\r\n    ReturnType<typeof setAllUsersAC>\r\n    | ReturnType<typeof deleteUserAC>\r\n    | ReturnType<typeof searchUserAC>\r\n\r\n\r\nexport enum ACTION_TYPES {\r\n    GET_USERS = 'GET_USERS',\r\n    DELETE_USER = 'DELETE_USER',\r\n    SEARCH_USER = 'SEARCH_USER'\r\n}\r\n\r\nconst initialState: Array<UsersType> = []\r\n\r\n//reducer\r\nexport const usersReducer = (state: Array<UsersType> = initialState, action: ActionType): Array<UsersType> => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.GET_USERS: {\r\n            return action.data\r\n        }\r\n        case ACTION_TYPES.DELETE_USER: {\r\n            return state.filter(u => u.id !== action.id)\r\n        }\r\n        case ACTION_TYPES.SEARCH_USER: {\r\n            return state.filter(u => u.name === action.name ? {...u, name: action.name} : u)\r\n            || state.filter(u => u.username === action.userName ? {...u, userName: action.userName} : u)\r\n            || state.filter(u => u.email === action.email ? {...u, email: action.email} : u)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\nexport const setAllUsersAC = (data: Array<UsersType>) => ({type: ACTION_TYPES.GET_USERS, data} as const)\r\nexport const deleteUserAC = (id: number) => ({type: ACTION_TYPES.DELETE_USER, id} as const)\r\nexport const searchUserAC = (name: string, userName: string, email: string) => ({type: ACTION_TYPES.SEARCH_USER, name, userName, email} as const)\r\n\r\n//thunk\r\nexport const getUsersListTC = () => (dispatch: Dispatch) => {\r\n    usersAPI.getUsers()\r\n        .then((res) => {\r\n            dispatch(setAllUsersAC(res.data))\r\n        })\r\n        .catch(error => {\r\n            console.log('Error' + error);\r\n        })\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n    withCredentials: true\r\n})\r\nexport const usersAPI = {\r\n    getUsers() {\r\n        return instance.get<Array<UsersType>>('users')\r\n    }\r\n}\r\n\r\nexport type UsersType = {\r\n    id: number,\r\n    name: string,\r\n    username: string,\r\n    email: string,\r\n    address: AddressType,\r\n    phone: number,\r\n    website: string,\r\n    company: CompanyType\r\n}\r\nexport type AddressType = {\r\n    street: string,\r\n    suite: string,\r\n    city: string,\r\n    zipcode: number,\r\n    geo: GeoLocationType\r\n}\r\nexport type GeoLocationType = {\r\n    lat: number,\r\n    lng: number\r\n}\r\nexport type CompanyType = {\r\n    name: string,\r\n    catchPhrase: string,\r\n    bs: string\r\n}\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../BLL/Store\";\r\nimport {UsersType} from \"../DAL/API\";\r\nimport './Search.css'\r\nimport {deleteUserAC, getUsersListTC} from \"../BLL/UsersReducer\";\r\n\r\nexport const Search = () => {\r\n    const dispatch = useDispatch()\r\n    const users = useSelector<AppRootStateType, Array<UsersType>>(state => state.users)\r\n    const [name, setName] = useState<string>('');\r\n    const [foundUsers, setFoundUsers] = useState<Array<UsersType>>(users);\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersListTC())\r\n    }, [dispatch])\r\n\r\n    const filter = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const keyword = e.currentTarget.value;\r\n\r\n        if (keyword !== '') {\r\n            const results = users.filter((user) => {\r\n                return user.name.toLowerCase().startsWith(keyword.toLowerCase())\r\n                    || user.username.toLowerCase().startsWith(keyword.toLowerCase())\r\n                    || user.email.toLowerCase().startsWith(keyword.toLowerCase());\r\n            });\r\n            setFoundUsers(results);\r\n        } else {\r\n            setFoundUsers(users);\r\n        }\r\n        setName(keyword);\r\n    };\r\n    const deleteUser = useCallback(function (id: number) {\r\n        dispatch(deleteUserAC(id))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <input\r\n                type=\"search\"\r\n                value={name}\r\n                onChange={filter}\r\n                className=\"input\"\r\n                placeholder=\"Search for list\"\r\n            />\r\n\r\n            <div className=\"user-list\">\r\n                {foundUsers && foundUsers.length > 0 ? (\r\n                    foundUsers.map((user) => (\r\n                        <li key={user.id} className=\"user\">\r\n                            <span className=\"user-name\">{user.name}</span>\r\n                            <span className=\"user-userName\">{user.username}</span>\r\n                            <span className=\"user-email\">{user.email}</span>\r\n                            <button onClick={() => {deleteUser(user.id)}}>Delete</button>\r\n                        </li>\r\n                    ))\r\n                ) : (\r\n                    <h3>No results found!</h3>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","import \"./UsersList.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {deleteUserAC, getUsersListTC, searchUserAC} from \"../BLL/UsersReducer\";\r\nimport {Search} from \"./Search\";\r\nimport {AppRootStateType} from \"../BLL/Store\";\r\nimport {UsersType} from \"../DAL/API\";\r\n\r\nexport const UsersList = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const resetSettings = useCallback(function () {\r\n        dispatch(getUsersListTC())\r\n    }, [dispatch])\r\n\r\n    const users = useSelector<AppRootStateType, Array<UsersType>>(state => state.users)\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersListTC())\r\n    }, [dispatch])\r\n\r\n    const deleteUser = useCallback(function (id: number) {\r\n        dispatch(deleteUserAC(id))\r\n    }, [dispatch])\r\n\r\n   /* const searchUser = useCallback( (name: string, userName: string, email: string) => {\r\n        dispatch(searchUserAC(name, userName, email))\r\n    }, [dispatch])*/\r\n\r\n    return (\r\n        <div className='container'>\r\n            <Search/>\r\n            <input\r\n                type=\"search\"\r\n                className=\"input\"\r\n                placeholder=\"Search for list\"\r\n                /*onChange={searchUser}*/\r\n            />\r\n            <button onClick={resetSettings}>Reset</button>\r\n                {users.map(u => {\r\n                        return <li key={u.id}>\r\n                            <span>{u.name} </span>\r\n                            <span>{u.username}</span>\r\n                            <span>{u.email}</span>\r\n                            <button onClick={() => {deleteUser(u.id)}}>Delete</button>\r\n                        </li>\r\n                    }\r\n                )}\r\n        </div>\r\n    )\r\n})","import React from 'react';\nimport './App.css';\nimport {UsersList} from './Components/UsersList';\n\nfunction App() {\n    return (\n        <div>\n            <UsersList/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {usersReducer} from \"./UsersReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    users: usersReducer\r\n})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./BLL/Store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
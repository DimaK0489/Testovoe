{"version":3,"sources":["BLL/UsersReducer.ts","DAL/API.ts","Components/Search.tsx","Components/UsersList.tsx","App.tsx","reportWebVitals.ts","BLL/Store.ts","index.tsx"],"names":["ACTION_TYPES","instance","axios","create","baseURL","withCredentials","usersAPI","get","initialState","getUsersListTC","dispatch","then","res","data","type","GET_USERS","catch","error","console","log","Search","props","useDispatch","resetSettings","useCallback","className","placeholder","onChange","searchHandler","onClick","UsersList","React","memo","users","useSelector","state","useState","foundUsers","setFoundUsers","useEffect","deleteUser","id","DELETE_USER","deleteUserAC","ev","value","currentTarget","results","filter","user","name","toLowerCase","indexOf","map","u","username","email","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAOYA,E,6ECLNC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,wCACTC,iBAAiB,IAERC,EAAW,WAEhB,OAAOL,EAASM,IAAsB,W,SDDlCP,K,sBAAAA,E,2BAAAA,M,KAKZ,IAAMQ,EAAiC,GAqB1BC,EAAiB,kBAAM,SAACC,GACjCJ,IACKK,MAAK,SAACC,GANc,IAACC,EAOlBH,GAPkBG,EAOKD,EAAIC,KAPmB,CAACC,KAAMd,EAAae,UAAWF,aAShFG,OAAM,SAAAC,GACHC,QAAQC,IAAI,QAAUF,Q,eE9BrBG,EAAS,SAACC,GACnB,IAAMX,EAAWY,cAEXC,EAAgBC,uBAAY,WAC9Bd,EAASD,OACV,CAACC,IAGJ,OACI,qCACI,uBACII,KAAK,SACLW,UAAU,QACVC,YAAY,kBACZC,SAAUN,EAAMO,gBAEpB,wBAAQH,UAAW,SAAUI,QAASN,EAAtC,uBCjBCO,EAAYC,IAAMC,MAAK,WAChC,IAAMtB,EAAWY,cACXW,EAAQC,aAAgD,SAAAC,GAAK,OAAIA,EAAMF,SAFvC,EAIFG,mBAA2BH,GAJzB,mBAI/BI,EAJ+B,KAInBC,EAJmB,KAMtCC,qBAAU,WACN7B,EAASD,OACV,CAACC,IACJ6B,qBAAU,WACND,EAAcL,KACf,CAACA,IAEJ,IAAMO,EAAahB,uBAAY,SAAUiB,GACrC/B,EHQoB,SAAC+B,GAAD,MAAiB,CAAC3B,KAAMd,EAAa0C,YAAaD,MGR7DE,CAAaF,MACvB,CAAC/B,IAUJ,OACI,sBAAKe,UAAU,kBAAf,UACI,cAAC,EAAD,CAAQG,cAVM,SAACgB,GACnB,IAAMC,EAAQD,EAAGE,cAAcD,MACzBE,EAAUd,EAAMe,QAAO,SAACC,GAC1B,OAAOA,EAAKC,KAAKC,cAAcC,QAAQP,IAAU,KAErDP,EAAcS,MAMTV,EAAWgB,KAAI,SAAAC,GACR,OAAO,+BACH,uBAAM7B,UAAW,YAAjB,UAA+B6B,EAAEJ,KAAjC,OACA,sBAAMzB,UAAW,iBAAjB,SAAoC6B,EAAEC,WACtC,+BAAOD,EAAEE,QACT,wBAAQ/B,UAAW,eAAgBI,QAAS,WAAOW,EAAWc,EAAEb,KAAhE,sBAJYa,EAAEb,aCzBvBgB,MARf,WACI,OACI,qBAAKhC,UAAW,gBAAhB,SACI,cAAC,EAAD,OCOGiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjD,MAAK,YAAkD,IAA/CkD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,eCLRO,EAAcC,YAAgB,CAChClC,MNUwB,WAAmF,IAAlFE,EAAiF,uDAAvD3B,EAAc4D,EAAyC,uCAC1G,OAAQA,EAAOtD,MACX,KAAKd,EAAae,UACd,OAAOqD,EAAOvD,KAElB,KAAKb,EAAa0C,YACd,OAAOP,EAAMa,QAAO,SAAAM,GAAC,OAAIA,EAAEb,KAAO2B,EAAO3B,MAE7C,QACI,OAAON,MMhBbkC,EAAQC,YAAYJ,EAAaK,YAAgBC,MAKvDC,OAAOJ,MAAQA,EACAA,QCNfK,IAASC,OACL,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,IAAMO,WAAP,UACI,cAAC,EAAD,QAGRC,SAASC,eAAe,SAM5BpB,M","file":"static/js/main.9d5042f9.chunk.js","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {usersAPI, UsersType} from \"../DAL/API\";\r\n\r\nexport type ActionType =\r\n    ReturnType<typeof setAllUsersAC>\r\n    | ReturnType<typeof deleteUserAC>\r\n\r\nexport enum ACTION_TYPES {\r\n    GET_USERS = 'GET_USERS',\r\n    DELETE_USER = 'DELETE_USER'\r\n}\r\n\r\nconst initialState: Array<UsersType> = []\r\n\r\n//reducer\r\nexport const usersReducer = (state: Array<UsersType> = initialState, action: ActionType): Array<UsersType> => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.GET_USERS: {\r\n            return action.data\r\n        }\r\n        case ACTION_TYPES.DELETE_USER: {\r\n            return state.filter(u => u.id !== action.id)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\nexport const setAllUsersAC = (data: Array<UsersType>) => ({type: ACTION_TYPES.GET_USERS, data} as const)\r\nexport const deleteUserAC = (id: number) => ({type: ACTION_TYPES.DELETE_USER, id} as const)\r\n\r\n//thunk\r\nexport const getUsersListTC = () => (dispatch: Dispatch) => {\r\n    usersAPI.getUsers()\r\n        .then((res) => {\r\n            dispatch(setAllUsersAC(res.data))\r\n        })\r\n        .catch(error => {\r\n            console.log('Error' + error);\r\n        })\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n    withCredentials: true\r\n})\r\nexport const usersAPI = {\r\n    getUsers() {\r\n        return instance.get<Array<UsersType>>('users')\r\n    }\r\n}\r\n\r\nexport type UsersType = {\r\n    id: number,\r\n    name: string,\r\n    username: string,\r\n    email: string,\r\n    address: AddressType,\r\n    phone: number,\r\n    website: string,\r\n    company: CompanyType\r\n}\r\nexport type AddressType = {\r\n    street: string,\r\n    suite: string,\r\n    city: string,\r\n    zipcode: number,\r\n    geo: GeoLocationType\r\n}\r\nexport type GeoLocationType = {\r\n    lat: number,\r\n    lng: number\r\n}\r\nexport type CompanyType = {\r\n    name: string,\r\n    catchPhrase: string,\r\n    bs: string\r\n}\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport './Search.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getUsersListTC} from \"../BLL/UsersReducer\";\r\n\r\ntype SearchPropsType = {\r\n    searchHandler: (ev: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const Search = (props: SearchPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const resetSettings = useCallback(function () {\r\n        dispatch(getUsersListTC())\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type=\"search\"\r\n                className=\"input\"\r\n                placeholder=\"Search for list\"\r\n                onChange={props.searchHandler}\r\n            />\r\n            <button className={'button'} onClick={resetSettings}>Reset</button>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","import \"./UsersList.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {ChangeEvent, useCallback, useEffect, useState} from \"react\";\r\nimport {deleteUserAC, getUsersListTC} from \"../BLL/UsersReducer\";\r\nimport {AppRootStateType} from \"../BLL/Store\";\r\nimport {UsersType} from \"../DAL/API\";\r\nimport {Search} from \"./Search\";\r\n\r\nexport const UsersList = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const users = useSelector<AppRootStateType, Array<UsersType>>(state => state.users)\r\n\r\n    const [foundUsers, setFoundUsers] = useState<Array<UsersType>>(users);\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersListTC())\r\n    }, [dispatch])\r\n    useEffect(() => {\r\n        setFoundUsers(users)\r\n    }, [users])\r\n\r\n    const deleteUser = useCallback(function (id: number) {\r\n        dispatch(deleteUserAC(id))\r\n    }, [dispatch])\r\n\r\n    const searchHandler = (ev: ChangeEvent<HTMLInputElement>) => {\r\n        const value = ev.currentTarget.value\r\n        const results = users.filter((user) => {\r\n            return user.name.toLowerCase().indexOf(value) > -1\r\n        })\r\n        setFoundUsers(results)\r\n    }\r\n\r\n    return (\r\n        <div className='container-users'>\r\n            <Search searchHandler={searchHandler}/>\r\n            {foundUsers.map(u => {\r\n                    return <li key={u.id} >\r\n                        <span className={'user-name'}>{u.name} </span>\r\n                        <span className={'user_user-name'}>{u.username}</span>\r\n                        <span>{u.email}</span>\r\n                        <button className={'deleteButton'} onClick={() => {deleteUser(u.id)}}>Delete\r\n                        </button>\r\n                    </li>\r\n                }\r\n            )}\r\n        </div>\r\n    )\r\n})","import React from 'react';\nimport './App.css';\nimport {UsersList} from './Components/UsersList';\n\nfunction App() {\n    return (\n        <div className={'app-container'}>\n            <UsersList/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {usersReducer} from \"./UsersReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    users: usersReducer\r\n})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./BLL/Store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}